
main_atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000004d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000899  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000678  00000000  00000000  00000e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cd  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d3  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002062  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  74:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <step_motor>:
volatile uint8_t distance = 0;
volatile uint8_t data_received = 0;
volatile uint8_t byte_count = 0;

// Your original motor function (corrected)
void step_motor(uint32_t direction, uint32_t distance) {
  7c:	8f 92       	push	r8
  7e:	9f 92       	push	r9
  80:	af 92       	push	r10
  82:	bf 92       	push	r11
  84:	cf 92       	push	r12
  86:	df 92       	push	r13
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	6b 01       	movw	r12, r22
  8e:	7c 01       	movw	r14, r24
	// Set direction (1 for CW, 0 for CCW)
	
	float steps = SQUAR_SIZE * distance;
  90:	a4 e3       	ldi	r26, 0x34	; 52
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	0e 94 12 02 	call	0x424	; 0x424 <__muluhisi3>
  98:	0e 94 ac 01 	call	0x358	; 0x358 <__floatunsisf>
  9c:	4b 01       	movw	r8, r22
  9e:	5c 01       	movw	r10, r24
	
	// Set direction pins for both motors based on movement direction
	if(direction == R_L) {
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	c8 16       	cp	r12, r24
  a4:	d1 04       	cpc	r13, r1
  a6:	e1 04       	cpc	r14, r1
  a8:	f1 04       	cpc	r15, r1
  aa:	39 f4       	brne	.+14     	; 0xba <step_motor+0x3e>
		PORTD |= (1 << WHITE_DIR);   // White motor CW
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << BLACK_DIR);   // Black motor CW
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	18 c0       	rjmp	.+48     	; 0xea <step_motor+0x6e>
		} else if (direction == L_R) {
  ba:	c1 14       	cp	r12, r1
  bc:	d1 04       	cpc	r13, r1
  be:	e1 04       	cpc	r14, r1
  c0:	f1 04       	cpc	r15, r1
  c2:	39 f4       	brne	.+14     	; 0xd2 <step_motor+0x56>
		PORTD &= ~(1 << WHITE_DIR);  // White motor CCW
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << BLACK_DIR);  // Black motor CCW
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	0c c0       	rjmp	.+24     	; 0xea <step_motor+0x6e>
		} else if (direction == B_T) {
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	c9 16       	cp	r12, r25
  d6:	d1 04       	cpc	r13, r1
  d8:	e1 04       	cpc	r14, r1
  da:	f1 04       	cpc	r15, r1
  dc:	51 f4       	brne	.+20     	; 0xf2 <step_motor+0x76>
		PORTD &= ~(1 << BLACK_DIR);  // Black motor CCW
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << WHITE_DIR);   // White motor CW
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	82 bb       	out	0x12, r24	; 18
volatile uint8_t distance = 0;
volatile uint8_t data_received = 0;
volatile uint8_t byte_count = 0;

// Your original motor function (corrected)
void step_motor(uint32_t direction, uint32_t distance) {
  ea:	c1 2c       	mov	r12, r1
  ec:	d1 2c       	mov	r13, r1
  ee:	76 01       	movw	r14, r12
  f0:	2a c0       	rjmp	.+84     	; 0x146 <step_motor+0xca>
		PORTD &= ~(1 << WHITE_DIR);  // White motor CCW
		PORTD &= ~(1 << BLACK_DIR);  // Black motor CCW
		} else if (direction == B_T) {
		PORTD &= ~(1 << BLACK_DIR);  // Black motor CCW
		PORTD |= (1 << WHITE_DIR);   // White motor CW
		} else if(direction == T_B) {
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	c8 16       	cp	r12, r24
  f6:	d1 04       	cpc	r13, r1
  f8:	e1 04       	cpc	r14, r1
  fa:	f1 04       	cpc	r15, r1
  fc:	b1 f7       	brne	.-20     	; 0xea <step_motor+0x6e>
		PORTD &= ~(1 << WHITE_DIR);  // White motor CCW
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	87 7f       	andi	r24, 0xF7	; 247
 102:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << BLACK_DIR);   // Black motor CW
 104:	82 b3       	in	r24, 0x12	; 18
 106:	82 60       	ori	r24, 0x02	; 2
 108:	82 bb       	out	0x12, r24	; 18
 10a:	ef cf       	rjmp	.-34     	; 0xea <step_motor+0x6e>
	}

	// Generate steps for both motors simultaneously
	for (uint32_t i = 0; i < steps; i++) {
		// Generate a step pulse on both motors
		PORTD |= (1 << WHITE_STEP);
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << BLACK_STEP);
 112:	82 b3       	in	r24, 0x12	; 18
 114:	81 60       	ori	r24, 0x01	; 1
 116:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f ec       	ldi	r24, 0xCF	; 207
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <step_motor+0xa0>
 120:	00 c0       	rjmp	.+0      	; 0x122 <step_motor+0xa6>
 122:	00 00       	nop
		_delay_ms(1);               // Step pulse width
		PORTD &= ~(1 << WHITE_STEP);
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << BLACK_STEP);
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	82 bb       	out	0x12, r24	; 18
 130:	8f ec       	ldi	r24, 0xCF	; 207
 132:	97 e0       	ldi	r25, 0x07	; 7
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <step_motor+0xb8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <step_motor+0xbe>
 13a:	00 00       	nop
		PORTD &= ~(1 << WHITE_DIR);  // White motor CCW
		PORTD |= (1 << BLACK_DIR);   // Black motor CW
	}

	// Generate steps for both motors simultaneously
	for (uint32_t i = 0; i < steps; i++) {
 13c:	9f ef       	ldi	r25, 0xFF	; 255
 13e:	c9 1a       	sub	r12, r25
 140:	d9 0a       	sbc	r13, r25
 142:	e9 0a       	sbc	r14, r25
 144:	f9 0a       	sbc	r15, r25
 146:	c7 01       	movw	r24, r14
 148:	b6 01       	movw	r22, r12
 14a:	0e 94 ac 01 	call	0x358	; 0x358 <__floatunsisf>
 14e:	9b 01       	movw	r18, r22
 150:	ac 01       	movw	r20, r24
 152:	c5 01       	movw	r24, r10
 154:	b4 01       	movw	r22, r8
 156:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__gesf2>
 15a:	18 16       	cp	r1, r24
 15c:	bc f2       	brlt	.-82     	; 0x10c <step_motor+0x90>
		_delay_ms(1);               // Step pulse width
		PORTD &= ~(1 << WHITE_STEP);
		PORTD &= ~(1 << BLACK_STEP);
		_delay_ms(1);               // Step interval
	}
}
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	df 90       	pop	r13
 164:	cf 90       	pop	r12
 166:	bf 90       	pop	r11
 168:	af 90       	pop	r10
 16a:	9f 90       	pop	r9
 16c:	8f 90       	pop	r8
 16e:	08 95       	ret

00000170 <calibrate_step>:

// Special function for calibration small steps (corrected)
void calibrate_step(uint32_t direction) {
	// Small movement for calibration (like your original calibrate_speed)
	if(direction == R_L) {
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	71 05       	cpc	r23, r1
 174:	81 05       	cpc	r24, r1
 176:	91 05       	cpc	r25, r1
 178:	39 f4       	brne	.+14     	; 0x188 <calibrate_step+0x18>
		PORTD |= (1 << WHITE_DIR);
 17a:	82 b3       	in	r24, 0x12	; 18
 17c:	88 60       	ori	r24, 0x08	; 8
 17e:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << BLACK_DIR);
 180:	82 b3       	in	r24, 0x12	; 18
 182:	82 60       	ori	r24, 0x02	; 2
 184:	82 bb       	out	0x12, r24	; 18
 186:	17 c0       	rjmp	.+46     	; 0x1b6 <calibrate_step+0x46>
		} else if (direction == L_R) {
 188:	61 15       	cp	r22, r1
 18a:	71 05       	cpc	r23, r1
 18c:	81 05       	cpc	r24, r1
 18e:	91 05       	cpc	r25, r1
 190:	39 f4       	brne	.+14     	; 0x1a0 <calibrate_step+0x30>
		PORTD &= ~(1 << WHITE_DIR);
 192:	82 b3       	in	r24, 0x12	; 18
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << BLACK_DIR);
 198:	82 b3       	in	r24, 0x12	; 18
 19a:	8d 7f       	andi	r24, 0xFD	; 253
 19c:	82 bb       	out	0x12, r24	; 18
 19e:	0b c0       	rjmp	.+22     	; 0x1b6 <calibrate_step+0x46>
		} else if (direction == B_T) {
 1a0:	62 30       	cpi	r22, 0x02	; 2
 1a2:	71 05       	cpc	r23, r1
 1a4:	81 05       	cpc	r24, r1
 1a6:	91 05       	cpc	r25, r1
 1a8:	41 f4       	brne	.+16     	; 0x1ba <calibrate_step+0x4a>
		PORTD &= ~(1 << BLACK_DIR);
 1aa:	82 b3       	in	r24, 0x12	; 18
 1ac:	8d 7f       	andi	r24, 0xFD	; 253
 1ae:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << WHITE_DIR);
 1b0:	82 b3       	in	r24, 0x12	; 18
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	82 bb       	out	0x12, r24	; 18
		_delay_ms(1);               // Step interval
	}
}

// Special function for calibration small steps (corrected)
void calibrate_step(uint32_t direction) {
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	25 c0       	rjmp	.+74     	; 0x204 <calibrate_step+0x94>
		PORTD &= ~(1 << WHITE_DIR);
		PORTD &= ~(1 << BLACK_DIR);
		} else if (direction == B_T) {
		PORTD &= ~(1 << BLACK_DIR);
		PORTD |= (1 << WHITE_DIR);
		} else if(direction == T_B) {
 1ba:	63 30       	cpi	r22, 0x03	; 3
 1bc:	71 05       	cpc	r23, r1
 1be:	81 05       	cpc	r24, r1
 1c0:	91 05       	cpc	r25, r1
 1c2:	c9 f7       	brne	.-14     	; 0x1b6 <calibrate_step+0x46>
		PORTD &= ~(1 << WHITE_DIR);
 1c4:	82 b3       	in	r24, 0x12	; 18
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << BLACK_DIR);
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	82 bb       	out	0x12, r24	; 18
 1d0:	f2 cf       	rjmp	.-28     	; 0x1b6 <calibrate_step+0x46>
	}

	// Make only 4 steps (equivalent to calibrate_speed)
	for (uint8_t i = 0; i < 4; i++) {
		PORTD |= (1 << WHITE_STEP);
 1d2:	82 b3       	in	r24, 0x12	; 18
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << BLACK_STEP);
 1d8:	82 b3       	in	r24, 0x12	; 18
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	ef e6       	ldi	r30, 0x6F	; 111
 1e0:	f7 e1       	ldi	r31, 0x17	; 23
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <calibrate_step+0x72>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <calibrate_step+0x78>
 1e8:	00 00       	nop
		_delay_ms(3);  // Slower for calibration
		PORTD &= ~(1 << WHITE_STEP);
 1ea:	82 b3       	in	r24, 0x12	; 18
 1ec:	8b 7f       	andi	r24, 0xFB	; 251
 1ee:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << BLACK_STEP);
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	ef e6       	ldi	r30, 0x6F	; 111
 1f8:	f7 e1       	ldi	r31, 0x17	; 23
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <calibrate_step+0x8a>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <calibrate_step+0x90>
 200:	00 00       	nop
		PORTD &= ~(1 << WHITE_DIR);
		PORTD |= (1 << BLACK_DIR);
	}

	// Make only 4 steps (equivalent to calibrate_speed)
	for (uint8_t i = 0; i < 4; i++) {
 202:	9f 5f       	subi	r25, 0xFF	; 255
 204:	94 30       	cpi	r25, 0x04	; 4
 206:	28 f3       	brcs	.-54     	; 0x1d2 <calibrate_step+0x62>
		_delay_ms(3);  // Slower for calibration
		PORTD &= ~(1 << WHITE_STEP);
		PORTD &= ~(1 << BLACK_STEP);
		_delay_ms(3);
	}
}
 208:	08 95       	ret

0000020a <__vector_19>:

// I2C interrupt handler (improved error handling)
ISR(TWI_vect) {
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
	uint8_t status = TWSR & 0xF8;
 216:	81 b1       	in	r24, 0x01	; 1
 218:	88 7f       	andi	r24, 0xF8	; 248
	
	
	//debug

	
	switch(status) {
 21a:	80 38       	cpi	r24, 0x80	; 128
 21c:	49 f0       	breq	.+18     	; 0x230 <__vector_19+0x26>
 21e:	80 3a       	cpi	r24, 0xA0	; 160
 220:	19 f1       	breq	.+70     	; 0x268 <__vector_19+0x5e>
 222:	80 36       	cpi	r24, 0x60	; 96
 224:	21 f5       	brne	.+72     	; 0x26e <__vector_19+0x64>
		case 0x60: // SLA+W received, ACK sent
		byte_count = 0;
 226:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA) | (1 << TWIE);
 22a:	85 ec       	ldi	r24, 0xC5	; 197
 22c:	86 bf       	out	0x36, r24	; 54
		break;
 22e:	21 c0       	rjmp	.+66     	; 0x272 <__vector_19+0x68>

		case 0x80: // Data received, ACK sent
		if (byte_count == 0) {
 230:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 234:	81 11       	cpse	r24, r1
 236:	09 c0       	rjmp	.+18     	; 0x24a <__vector_19+0x40>
			command = TWDR;
 238:	83 b1       	in	r24, 0x03	; 3
 23a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <command>
			byte_count++;
 23e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 248:	0c c0       	rjmp	.+24     	; 0x262 <__vector_19+0x58>
			} else if (byte_count == 1) {
 24a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	41 f4       	brne	.+16     	; 0x262 <__vector_19+0x58>
			distance = TWDR;
 252:	83 b1       	in	r24, 0x03	; 3
 254:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <distance>
			data_received = 1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <data_received>
			byte_count = 0;
 25e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA) | (1 << TWIE);
 262:	85 ec       	ldi	r24, 0xC5	; 197
 264:	86 bf       	out	0x36, r24	; 54
		break;
 266:	05 c0       	rjmp	.+10     	; 0x272 <__vector_19+0x68>

		case 0xA0: // Stop condition
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA) | (1 << TWIE);
 268:	85 ec       	ldi	r24, 0xC5	; 197
 26a:	86 bf       	out	0x36, r24	; 54
		break;
 26c:	02 c0       	rjmp	.+4      	; 0x272 <__vector_19+0x68>

		default:
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA) | (1 << TWIE);
 26e:	85 ec       	ldi	r24, 0xC5	; 197
 270:	86 bf       	out	0x36, r24	; 54
		break;

	}
}
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <i2c_slave_init>:

void i2c_slave_init() {
	// Configure I2C pins (PC0=SCL, PC1=SDA) as inputs with pull-ups
	DDRC &= ~((1<<PC0) | (1<<PC1));  // Set as inputs
 27e:	84 b3       	in	r24, 0x14	; 20
 280:	8c 7f       	andi	r24, 0xFC	; 252
 282:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC0) | (1<<PC1);    // Enable pull-ups
 284:	85 b3       	in	r24, 0x15	; 21
 286:	83 60       	ori	r24, 0x03	; 3
 288:	85 bb       	out	0x15, r24	; 21
	
	// Set I2C bit rate for 100kHz (assuming 8MHz system clock)
	TWBR = 32;  // Bit rate register
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;   // Prescaler = 1
 28e:	11 b8       	out	0x01, r1	; 1
	
	TWAR = SLAVE_ADDRESS << 1; // Set slave address
 290:	80 e1       	ldi	r24, 0x10	; 16
 292:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE); // Enable I2C with interrupt
 294:	85 ec       	ldi	r24, 0xC5	; 197
 296:	86 bf       	out	0x36, r24	; 54
	sei(); // Enable global interrupts
 298:	78 94       	sei
 29a:	08 95       	ret

0000029c <main>:
}

int main(void) {
	// Your original pin setup (unchanged)
	DDRD |= (1 << BLACK_DIR) | (1 << BLACK_STEP) | (1 << WHITE_DIR) | (1 <<WHITE_STEP);
 29c:	81 b3       	in	r24, 0x11	; 17
 29e:	8f 60       	ori	r24, 0x0F	; 15
 2a0:	81 bb       	out	0x11, r24	; 17
	
	// Initialize I2C
	i2c_slave_init();
 2a2:	0e 94 3f 01 	call	0x27e	; 0x27e <i2c_slave_init>
	
	PORTB ^= (1 << PB0);
 2a6:	98 b3       	in	r25, 0x18	; 24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	89 27       	eor	r24, r25
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	2f e7       	ldi	r18, 0x7F	; 127
 2b0:	88 e3       	ldi	r24, 0x38	; 56
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x18>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x22>
 2be:	00 00       	nop
	_delay_ms(50);
	while (1) {
		if(data_received) {
 2c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <data_received>
 2c4:	88 23       	and	r24, r24
 2c6:	e1 f3       	breq	.-8      	; 0x2c0 <main+0x24>
			data_received = 0;
 2c8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <data_received>
			
			switch(command) {
 2cc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <command>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	11 f1       	breq	.+68     	; 0x318 <main+0x7c>
 2d4:	28 f4       	brcc	.+10     	; 0x2e0 <main+0x44>
 2d6:	88 23       	and	r24, r24
 2d8:	41 f0       	breq	.+16     	; 0x2ea <main+0x4e>
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	89 f0       	breq	.+34     	; 0x300 <main+0x64>
 2de:	f0 cf       	rjmp	.-32     	; 0x2c0 <main+0x24>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	31 f1       	breq	.+76     	; 0x330 <main+0x94>
 2e4:	85 30       	cpi	r24, 0x05	; 5
 2e6:	81 f1       	breq	.+96     	; 0x348 <main+0xac>
 2e8:	eb cf       	rjmp	.-42     	; 0x2c0 <main+0x24>
				case CMD_L_R:
				step_motor(L_R, distance);
 2ea:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <distance>
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	cb 01       	movw	r24, r22
 2fa:	0e 94 3e 00 	call	0x7c	; 0x7c <step_motor>
				break;
 2fe:	e0 cf       	rjmp	.-64     	; 0x2c0 <main+0x24>
				
				case CMD_R_L:
				step_motor(R_L, distance);
 300:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <distance>
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 3e 00 	call	0x7c	; 0x7c <step_motor>
				break;
 316:	d4 cf       	rjmp	.-88     	; 0x2c0 <main+0x24>
				
				case CMD_B_T:
				step_motor(B_T, distance);
 318:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <distance>
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 3e 00 	call	0x7c	; 0x7c <step_motor>
				break;
 32e:	c8 cf       	rjmp	.-112    	; 0x2c0 <main+0x24>
				
				case CMD_T_B:
				step_motor(T_B, distance);
 330:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <distance>
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	63 e0       	ldi	r22, 0x03	; 3
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 3e 00 	call	0x7c	; 0x7c <step_motor>
				break;
 346:	bc cf       	rjmp	.-136    	; 0x2c0 <main+0x24>
				
				case CMD_CALIBRATE_STEP:
				calibrate_step(distance); // distance here is actually direction
 348:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <distance>
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 b8 00 	call	0x170	; 0x170 <calibrate_step>
				break;
 356:	b4 cf       	rjmp	.-152    	; 0x2c0 <main+0x24>

00000358 <__floatunsisf>:
 358:	e8 94       	clt
 35a:	09 c0       	rjmp	.+18     	; 0x36e <__floatsisf+0x12>

0000035c <__floatsisf>:
 35c:	97 fb       	bst	r25, 7
 35e:	3e f4       	brtc	.+14     	; 0x36e <__floatsisf+0x12>
 360:	90 95       	com	r25
 362:	80 95       	com	r24
 364:	70 95       	com	r23
 366:	61 95       	neg	r22
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	99 23       	and	r25, r25
 370:	a9 f0       	breq	.+42     	; 0x39c <__floatsisf+0x40>
 372:	f9 2f       	mov	r31, r25
 374:	96 e9       	ldi	r25, 0x96	; 150
 376:	bb 27       	eor	r27, r27
 378:	93 95       	inc	r25
 37a:	f6 95       	lsr	r31
 37c:	87 95       	ror	r24
 37e:	77 95       	ror	r23
 380:	67 95       	ror	r22
 382:	b7 95       	ror	r27
 384:	f1 11       	cpse	r31, r1
 386:	f8 cf       	rjmp	.-16     	; 0x378 <__floatsisf+0x1c>
 388:	fa f4       	brpl	.+62     	; 0x3c8 <__floatsisf+0x6c>
 38a:	bb 0f       	add	r27, r27
 38c:	11 f4       	brne	.+4      	; 0x392 <__floatsisf+0x36>
 38e:	60 ff       	sbrs	r22, 0
 390:	1b c0       	rjmp	.+54     	; 0x3c8 <__floatsisf+0x6c>
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	8f 4f       	sbci	r24, 0xFF	; 255
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	16 c0       	rjmp	.+44     	; 0x3c8 <__floatsisf+0x6c>
 39c:	88 23       	and	r24, r24
 39e:	11 f0       	breq	.+4      	; 0x3a4 <__floatsisf+0x48>
 3a0:	96 e9       	ldi	r25, 0x96	; 150
 3a2:	11 c0       	rjmp	.+34     	; 0x3c6 <__floatsisf+0x6a>
 3a4:	77 23       	and	r23, r23
 3a6:	21 f0       	breq	.+8      	; 0x3b0 <__floatsisf+0x54>
 3a8:	9e e8       	ldi	r25, 0x8E	; 142
 3aa:	87 2f       	mov	r24, r23
 3ac:	76 2f       	mov	r23, r22
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <__floatsisf+0x5e>
 3b0:	66 23       	and	r22, r22
 3b2:	71 f0       	breq	.+28     	; 0x3d0 <__floatsisf+0x74>
 3b4:	96 e8       	ldi	r25, 0x86	; 134
 3b6:	86 2f       	mov	r24, r22
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	2a f0       	brmi	.+10     	; 0x3c8 <__floatsisf+0x6c>
 3be:	9a 95       	dec	r25
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	da f7       	brpl	.-10     	; 0x3be <__floatsisf+0x62>
 3c8:	88 0f       	add	r24, r24
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	97 f9       	bld	r25, 7
 3d0:	08 95       	ret

000003d2 <__gesf2>:
 3d2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__fp_cmp>
 3d6:	08 f4       	brcc	.+2      	; 0x3da <__gesf2+0x8>
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	08 95       	ret

000003dc <__fp_cmp>:
 3dc:	99 0f       	add	r25, r25
 3de:	00 08       	sbc	r0, r0
 3e0:	55 0f       	add	r21, r21
 3e2:	aa 0b       	sbc	r26, r26
 3e4:	e0 e8       	ldi	r30, 0x80	; 128
 3e6:	fe ef       	ldi	r31, 0xFE	; 254
 3e8:	16 16       	cp	r1, r22
 3ea:	17 06       	cpc	r1, r23
 3ec:	e8 07       	cpc	r30, r24
 3ee:	f9 07       	cpc	r31, r25
 3f0:	c0 f0       	brcs	.+48     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3f2:	12 16       	cp	r1, r18
 3f4:	13 06       	cpc	r1, r19
 3f6:	e4 07       	cpc	r30, r20
 3f8:	f5 07       	cpc	r31, r21
 3fa:	98 f0       	brcs	.+38     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fc:	62 1b       	sub	r22, r18
 3fe:	73 0b       	sbc	r23, r19
 400:	84 0b       	sbc	r24, r20
 402:	95 0b       	sbc	r25, r21
 404:	39 f4       	brne	.+14     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 406:	0a 26       	eor	r0, r26
 408:	61 f0       	breq	.+24     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 40a:	23 2b       	or	r18, r19
 40c:	24 2b       	or	r18, r20
 40e:	25 2b       	or	r18, r21
 410:	21 f4       	brne	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 412:	08 95       	ret
 414:	0a 26       	eor	r0, r26
 416:	09 f4       	brne	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	a1 40       	sbci	r26, 0x01	; 1
 41a:	a6 95       	lsr	r26
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	81 1d       	adc	r24, r1
 420:	81 1d       	adc	r24, r1
 422:	08 95       	ret

00000424 <__muluhisi3>:
 424:	0e 94 1d 02 	call	0x43a	; 0x43a <__umulhisi3>
 428:	a5 9f       	mul	r26, r21
 42a:	90 0d       	add	r25, r0
 42c:	b4 9f       	mul	r27, r20
 42e:	90 0d       	add	r25, r0
 430:	a4 9f       	mul	r26, r20
 432:	80 0d       	add	r24, r0
 434:	91 1d       	adc	r25, r1
 436:	11 24       	eor	r1, r1
 438:	08 95       	ret

0000043a <__umulhisi3>:
 43a:	a2 9f       	mul	r26, r18
 43c:	b0 01       	movw	r22, r0
 43e:	b3 9f       	mul	r27, r19
 440:	c0 01       	movw	r24, r0
 442:	a3 9f       	mul	r26, r19
 444:	70 0d       	add	r23, r0
 446:	81 1d       	adc	r24, r1
 448:	11 24       	eor	r1, r1
 44a:	91 1d       	adc	r25, r1
 44c:	b2 9f       	mul	r27, r18
 44e:	70 0d       	add	r23, r0
 450:	81 1d       	adc	r24, r1
 452:	11 24       	eor	r1, r1
 454:	91 1d       	adc	r25, r1
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
